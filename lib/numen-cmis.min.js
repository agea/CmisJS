angular.module("numen.cmis",[]).factory("CmisManagerFactory",["$q",function(l){return function(n,e){var c=cmis.createSession(n);e.username&&e.password&&c.setCredentials(e.username,e.password);e.token&&c.setToken(e.token);for(var g=e.errorCallback||function(){},f=l.defer(),m={connect:function(){c.loadRepositories().ok(function(a){var b=!1,d;for(d in a)if(a.hasOwnProperty(d)&&(b=!0,c.defaultRepository=a[d],d==e.repositoryId))break;b?f.resolve(a):(g(a),f.reject(a))}).notOk(function(a){g(a);f.reject(a)}).error(function(a){g(a);
f.reject(a)})},setCredentials:function(a,b){c.setCredentials(a,b)},setToken:function(a){c.setToken(a)},getRepositories:function(){return f.promise},setCurrentRepository:function(a){return f.promise.then(function(b){if(b[a])return c.defaultRepository=b[a],{status:0,message:"Repository ID successfully set to '"+a+"'"};b={status:1,message:"Unavailable repository ID '"+a+"'"};g(b);return l.reject(b)})}},k=[{name:"addObjectToFolder",isCmisRequest:!0},{name:"appendContentStream",isCmisRequest:!0},{name:"applyACL",
isCmisRequest:!0},{name:"applyPolicy",isCmisRequest:!0},{name:"bulkUpdateProperties",isCmisRequest:!0},{name:"cancelCheckOut",isCmisRequest:!0},{name:"checkIn",isCmisRequest:!0},{name:"checkOut",isCmisRequest:!0},{name:"createDocument",isCmisRequest:!0},{name:"createDocumentFromSource",isCmisRequest:!0},{name:"createFolder",isCmisRequest:!0},{name:"createItem",isCmisRequest:!0},{name:"createPolicy",isCmisRequest:!0},{name:"createRelationship",isCmisRequest:!0},{name:"createType",isCmisRequest:!0},
{name:"deleteContentStream",isCmisRequest:!0},{name:"deleteObject",isCmisRequest:!0},{name:"deleteTree",isCmisRequest:!0},{name:"deleteType",isCmisRequest:!0},{name:"getACL",isCmisRequest:!0},{name:"getAllVersions",isCmisRequest:!0},{name:"getAllowableActions",isCmisRequest:!0},{name:"getAppliedPolicies",isCmisRequest:!0},{name:"getCheckedOutDocs",isCmisRequest:!0},{name:"getChildren",isCmisRequest:!0},{name:"getContentChanges",isCmisRequest:!0},{name:"getContentStream",isCmisRequest:!0},{name:"getContentStreamURL",
isCmisRequest:!1},{name:"getDescendants",isCmisRequest:!0},{name:"getFolderParent",isCmisRequest:!0},{name:"getFolderTree",isCmisRequest:!0},{name:"getLastResult",isCmisRequest:!0},{name:"getObject",isCmisRequest:!0},{name:"getObjectByPath",isCmisRequest:!0},{name:"getObjectRelationships",isCmisRequest:!0},{name:"getParents",isCmisRequest:!0},{name:"getProperties",isCmisRequest:!0},{name:"getRenditions",isCmisRequest:!0},{name:"getRepositoryInfo",isCmisRequest:!0},{name:"getTypeChildren",isCmisRequest:!0},
{name:"getTypeDefinition",isCmisRequest:!0},{name:"getTypeDescendants",isCmisRequest:!0},{name:"moveObject",isCmisRequest:!0},{name:"query",isCmisRequest:!0},{name:"removeObjectFromFolder",isCmisRequest:!0},{name:"removePolicy",isCmisRequest:!0},{name:"setContentStream",isCmisRequest:!0},{name:"updateProperties",isCmisRequest:!0},{name:"updateType",isCmisRequest:!0}],h=0;h<k.length;h++)k[h].isCmisRequest?function(){var a=k[h].name;m[a]=function(){var b=arguments;return f.promise.then(function(){var d=
l.defer();c[a].apply(c,b).ok(function(a){d.resolve(a)}).notOk(function(a){g(a);d.reject(a)}).error(function(a){g(a);d.reject(a)});return d.promise})}}():function(){var a=k[h].name;m[a]=function(){var b=arguments;return f.promise.then(function(){return c[a].apply(c,b)})}}();return m}}]);
